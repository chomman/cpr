<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.1.xsd">
		
		<security:http pattern="/resources/**" security="none" />
		
		<security:global-method-security secured-annotations="enabled" />
		
			 <!-- This is where we configure Spring-Security  -->
			 <security:http auto-config="false" 
			 				use-expressions="true" 
			 				entry-point-ref="authenticationEntryPoint" >
			 
			 
			 
		 	 <security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
				
			 <security:anonymous />
			  
			  <security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
			  <security:custom-filter ref="exceptionTranslationFilter" after="EXCEPTION_TRANSLATION_FILTER" />
			  <security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER"/>
		 </security:http>

	  

		<bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" id="passwordEncoder"/>

		<bean id="customUserDetailsService" class="sk.peterjurkovic.cpr.spring.security.HibernateAuthenticationImpl"/>
		
		<bean id="customAuthenticationManager" class="sk.peterjurkovic.cpr.spring.security.AuthenticationManagerImpl" />
		  
		<bean id="authenticationFailureHandler" class="sk.peterjurkovic.cpr.spring.security.CustomUrlAuthenticationFailureHandler" />
	
		<bean id="authenticationSuccessHandler" class="sk.peterjurkovic.cpr.spring.security.CustomUrlAuthenticationSuccessHandler" />
		
		<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
	    	<constructor-arg value="/"/>
	    	<constructor-arg>
	      		<list>
	            	<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
	            	<ref bean="logoutListener"/>
	        	</list>
	    	</constructor-arg>
	    	<property name="filterProcessesUrl" value="/j_logout"/>
		</bean>
		
		<bean id="loginListener" class="sk.peterjurkovic.cpr.listeners.LoginListener" autowire="byName" />
	
		<bean id="logoutListener" class="sk.peterjurkovic.cpr.listeners.LogoutListener" autowire="byName" />
	
		<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
			<property name="accessDeniedHandler" ref="accessDeniedHandler" />
			<constructor-arg>
				<ref bean="authenticationEntryPoint"/>
			</constructor-arg>
		</bean>
	
		<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
			<property name="errorPage" value="/access-denied" />
		</bean>
	
		<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
			 <constructor-arg value="/login" />
			<property name="forceHttps" value="false" />
		</bean>
		
		<bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
			p:authenticationManager-ref="authenticationManager"
			p:authenticationFailureHandler-ref="authenticationFailureHandler"
			p:authenticationSuccessHandler-ref="authenticationSuccessHandler"
			p:filterProcessesUrl="/j_spring_security_check"
			/>
		
		
		<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
			 <constructor-arg>
		         <util:list>
					<ref local="daoAuthenticationProvider" />
					<ref local="anonymousAuthenticationProvider" />
		         </util:list>
		     </constructor-arg>
		     <property name="authenticationEventPublisher">
				<bean class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher" />
			 </property>	
		</bean>	
		
		<bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
		  <constructor-arg value="anonyms_unique_key"/>
		</bean>
		
		<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
			<property name="userDetailsService"	ref="customUserDetailsService" /> 
	<!-- 	<property name="saltSource" ref="saltSource" />  -->
	 	<property name="passwordEncoder" ref="passwordEncoder" />
		</bean>
		
		<security:authentication-manager />
<!-- 
		
		<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
     	 <constructor-arg>
	         <util:list>
	         	 <security:filter-chain pattern="/resources/**" filters="none"/>
	             <security:filter-chain pattern="/**" filters="logoutFilter,
          						 		  authenticationProcessingFilter,
          						 		  anonymousProcessingFilter,
          						 		  exceptionTranslationFilter,
          						 		  filterSecurityInterceptor" />
	         </util:list>
	     </constructor-arg>		
		</bean>
		
		
		<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
    	<constructor-arg value="/"/>
    	<constructor-arg>
      		<list>
            	<bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
            	<ref bean="logoutListener"/>
        	</list>
    	</constructor-arg>
    	<property name="filterProcessesUrl" value="/j_logout"/>
	</bean>
	
	
	<bean id="authenticationProcessingFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />  
	 	<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" /> 
		<property name="filterProcessesUrl" value="/j_spring_security_check" />
	</bean>
		
	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		 <constructor-arg>
	         <util:list>
	            <ref local="runAsAuthenticationProvider"/>
				<ref local="daoAuthenticationProvider" />
				<ref local="anonymousAuthenticationProvider" />
				<ref local="changePasswordAuthenticationProvider"/>
	         </util:list>
	     </constructor-arg>
	     <property name="authenticationEventPublisher">
			<bean class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher" />
		 </property>		
	</bean>		
	
	<bean id="loginListener" class="sk.peterjurkovic.cpr.listeners.LoginListener" autowire="byName" />
	
	<bean id="logoutListener" class="sk.peterjurkovic.cpr.listeners.LogoutListener" autowire="byName" />
	
	<bean id="runAsAuthenticationProvider" class="org.springframework.security.access.intercept.RunAsImplAuthenticationProvider">
	  <property name="key" value="passkey" />
	</bean>	
	
	<bean name="hibernateAuthentication" class="sk.peterjurkovic.cpr.spring.security.HibernateAuthenticationImpl" />
	
	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService"	ref="hibernateAuthentication" /> -->	
<!-- 	<property name="saltSource" ref="saltSource" />  -->
<!-- 	<property name="passwordEncoder" ref="passwordEncoder" />
	</bean>
	
	<bean id="passwordEncoder"	class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />	
	
	<bean id="saltSource" class="org.springframework.security.authentication.dao.SystemWideSaltSource">
		<property name="systemWideSalt" value="amoxojwo" />
	</bean>
	
	<bean id="authenticationFailureHandler" class="sk.peterjurkovic.cpr.spring.security.CustomUrlAuthenticationFailureHandler" />
	
	<bean id="authenticationSuccessHandler" class="sk.peterjurkovic.cpr.spring.security.CustomUrlAuthenticationSuccessHandler" />
	
	
	<bean id="changePasswordAuthenticationProvider" class="sk.peterjurkovic.cpr.spring.security.ChangePasswordAuthenticationProvider">
	     <property name="changePasswordTokenValidity" value="72" />
	</bean>	
	
	
	<bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
	  <constructor-arg value="anonyms_unique_key"/>
	</bean>

	<bean id="anonymousProcessingFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
	  <constructor-arg value="anonyms_unique_key" />
	  <property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
	</bean>
	
	
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg>
	         <util:list>
	            <ref local="roleVoter" />
	         </util:list>
	     </constructor-arg>
	     <property name="allowIfAllAbstainDecisions" value="false" />		
	</bean>
  
  	<bean id="roleVoter"  class="org.springframework.security.access.vote.RoleVoter" />
  		  
  
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		 <constructor-arg>
			<ref bean="authenticationEntryPoint"/>
		</constructor-arg>
		<property name="accessDeniedHandler" ref="accessDeniedHandler" />
	</bean>
	
	<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/access-denied" />
	</bean>
	
	<bean id="authenticationEntryPoint" class="sk.peterjurkovic.cpr.spring.security.MultipleLoginUrlAuthenticationEntryPoint">
		 <constructor-arg value="/login" />
		<property name="forceHttps" value="false" />
	</bean>
	
	
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source lowercase-comparisons="true" request-matcher="ant"  >
		      <security:intercept-url pattern="/profil/**" access="ROLE_USER" />
		      <security:intercept-url pattern="/admin/**" access="ROLE_ADMIN,ROLE_USER" />
		      <security:intercept-url pattern="/admin/login" access="ROLE_ANONYMOUS" />
		    </security:filter-security-metadata-source>
		</property>
	</bean>
	
-->	

</beans>