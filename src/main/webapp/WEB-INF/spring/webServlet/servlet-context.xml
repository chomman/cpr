<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"
		default-autowire="byName">

			
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven validator="validator" >
		<mvc:message-converters>
	        <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
	            <beans:property name="supportedMediaTypes">
	                <beans:list>
	                    <beans:value>image/jpeg</beans:value>
	                    <beans:value>image/png</beans:value>
	                    <beans:value>image/gif</beans:value>
	                </beans:list>
	            </beans:property>
	        </beans:bean>
	        <beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" >
	        	<beans:property name="objectMapper">
                    <beans:bean class="cz.nlfnorm.web.json.mappers.HibernateAwareObjectMapper" />
                </beans:property>
            </beans:bean>  
    	</mvc:message-converters>
	</mvc:annotation-driven>

	<context:component-scan base-package="cz.nlfnorm.web.controllers" />
	
	<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <beans:property name="alwaysUseFullPath" value="true" />
	</beans:bean>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	

	<beans:bean name="openSessionInViewInterceptor" class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor">
	  	<beans:property name="sessionFactory" ref="sessionFactory" />
	</beans:bean>  
	
	
	
	<mvc:interceptors>
		 <mvc:interceptor>
			<mvc:mapping path="/admin/**" />
		    <exclude-mapping path="/image/**"/>
			<exclude-mapping path="/resources/**"/>
		   	<beans:bean class="cz.nlfnorm.web.interceptors.AdminInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<exclude-mapping path="/resources/**"/>
			<exclude-mapping path="/admin/**"/>
			<exclude-mapping path="/image/**"/>
			<exclude-mapping path="/ajax/**"/>
			<beans:bean class="cz.nlfnorm.web.interceptors.WebpageInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<beans:bean id="exceptionResolver"  class="cz.nlfnorm.exceptions.CustomMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			  <beans:map>
			    <beans:entry key="cz.nlfnorm.exceptions.ItemNotFoundException" value="exceptions/item-not-found"  />
			    <beans:entry key="cz.nlfnorm.exceptions.PageNotFoundEception" value="exceptions/page-not-found" />
			    <beans:entry key="java.lang.Exception" value="exceptions/unexpected-error" />
	   		</beans:map>
	  </beans:property>
 	</beans:bean> 
	
</beans:beans>
